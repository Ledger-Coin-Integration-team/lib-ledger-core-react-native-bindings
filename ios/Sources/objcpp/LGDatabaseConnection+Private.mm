// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#import "LGDatabaseConnection+Private.h"
#import "LGDatabaseConnection.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "LGDatabaseBlob+Private.h"
#import "LGDatabaseStatement+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class DatabaseConnection::ObjcProxy final
: public ::ledger::core::api::DatabaseConnection
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::DatabaseConnection;
public:
    using ObjcProxyBase::ObjcProxyBase;
    std::shared_ptr<::ledger::core::api::DatabaseStatement> prepareStatement(const std::string & c_query, bool c_repeatable) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() prepareStatement:(::djinni::String::fromCpp(c_query))
                                                                                  repeatable:(::djinni::Bool::fromCpp(c_repeatable))];
            return ::djinni_generated::DatabaseStatement::toCpp(objcpp_result_);
        }
    }
    void begin() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() begin];
        }
    }
    void rollback() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() rollback];
        }
    }
    void commit() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() commit];
        }
    }
    void close() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() close];
        }
    }
    std::shared_ptr<::ledger::core::api::DatabaseBlob> newBlob() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() newBlob];
            return ::djinni_generated::DatabaseBlob::toCpp(objcpp_result_);
        }
    }
    bool isAlive() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() isAlive];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto DatabaseConnection::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto DatabaseConnection::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).djinni_private_get_proxied_objc_object();
}

}  // namespace djinni_generated
