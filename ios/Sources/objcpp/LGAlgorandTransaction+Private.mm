// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

#import "LGAlgorandTransaction+Private.h"
#import "LGAlgorandTransaction.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGAlgorandAssetConfigurationInfo+Private.h"
#import "LGAlgorandAssetFreezeInfo+Private.h"
#import "LGAlgorandAssetTransferInfo+Private.h"
#import "LGAlgorandParticipationInfo+Private.h"
#import "LGAlgorandPaymentInfo+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGAlgorandTransaction ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::AlgorandTransaction>&)cppRef;

@end

@implementation LGAlgorandTransaction {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::AlgorandTransaction>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::AlgorandTransaction>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)getId {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getId();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getType {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getType();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getSender {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSender();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getFee {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getFee();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getNote {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getNote();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getRound {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getRound();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getSenderRewards {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSenderRewards();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getReceiverRewards {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getReceiverRewards();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getCloseRewards {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCloseRewards();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setSender:(nonnull NSString *)sender {
    try {
        _cppRefHandle.get()->setSender(::djinni::String::toCpp(sender));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setFee:(nonnull NSString *)fee {
    try {
        _cppRefHandle.get()->setFee(::djinni::String::toCpp(fee));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setNote:(nonnull NSString *)note {
    try {
        _cppRefHandle.get()->setNote(::djinni::String::toCpp(note));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPaymentInfo:(nonnull LGAlgorandPaymentInfo *)info {
    try {
        _cppRefHandle.get()->setPaymentInfo(::djinni_generated::AlgorandPaymentInfo::toCpp(info));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull LGAlgorandPaymentInfo *)getPaymentInfo {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPaymentInfo();
        return ::djinni_generated::AlgorandPaymentInfo::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setParticipationInfo:(nonnull LGAlgorandParticipationInfo *)info {
    try {
        _cppRefHandle.get()->setParticipationInfo(::djinni_generated::AlgorandParticipationInfo::toCpp(info));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull LGAlgorandParticipationInfo *)getParticipationInfo {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getParticipationInfo();
        return ::djinni_generated::AlgorandParticipationInfo::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setAssetConfigurationInfo:(nonnull LGAlgorandAssetConfigurationInfo *)info {
    try {
        _cppRefHandle.get()->setAssetConfigurationInfo(::djinni_generated::AlgorandAssetConfigurationInfo::toCpp(info));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull LGAlgorandAssetConfigurationInfo *)getAssetConfigurationInfo {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAssetConfigurationInfo();
        return ::djinni_generated::AlgorandAssetConfigurationInfo::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setAssetTransferInfo:(nonnull LGAlgorandAssetTransferInfo *)info {
    try {
        _cppRefHandle.get()->setAssetTransferInfo(::djinni_generated::AlgorandAssetTransferInfo::toCpp(info));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull LGAlgorandAssetTransferInfo *)getAssetTransferInfo {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAssetTransferInfo();
        return ::djinni_generated::AlgorandAssetTransferInfo::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setAssetFreezeInfo:(nonnull LGAlgorandAssetFreezeInfo *)info {
    try {
        _cppRefHandle.get()->setAssetFreezeInfo(::djinni_generated::AlgorandAssetFreezeInfo::toCpp(info));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull LGAlgorandAssetFreezeInfo *)getAssetFreezeInfo {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAssetFreezeInfo();
        return ::djinni_generated::AlgorandAssetFreezeInfo::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)serialize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->serialize();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setSignature:(nonnull NSData *)signature {
    try {
        _cppRefHandle.get()->setSignature(::djinni::Binary::toCpp(signature));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto AlgorandTransaction::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto AlgorandTransaction::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGAlgorandTransaction>(cpp);
}

}  // namespace djinni_generated

@end
