// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

#import "LGAlgorandAccount+Private.h"
#import "LGAlgorandAccount.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGAlgorandAssetAmountCallback+Private.h"
#import "LGAlgorandAssetAmountListCallback+Private.h"
#import "LGAlgorandAssetParamsCallback+Private.h"
#import "LGAlgorandAssetParamsListCallback+Private.h"
#import "LGAlgorandOperationType+Private.h"
#import "LGAlgorandTransaction+Private.h"
#import "LGAlgorandTransactionCallback+Private.h"
#import "LGAmountCallback+Private.h"
#import "LGBoolCallback+Private.h"
#import "LGStringCallback+Private.h"
#import "LGTimePeriod+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGAlgorandAccount ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::AlgorandAccount>&)cppRef;

@end

@implementation LGAlgorandAccount {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::AlgorandAccount>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::AlgorandAccount>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)getSpendableBalance:(LGAlgorandOperationType)operationType
                   callback:(nullable id<LGAmountCallback>)callback {
    try {
        _cppRefHandle.get()->getSpendableBalance(::djinni::Enum<::ledger::core::api::AlgorandOperationType, LGAlgorandOperationType>::toCpp(operationType),
                                                 ::djinni_generated::AmountCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getAsset:(nonnull NSString *)assetId
        callback:(nullable id<LGAlgorandAssetParamsCallback>)callback {
    try {
        _cppRefHandle.get()->getAsset(::djinni::String::toCpp(assetId),
                                      ::djinni_generated::AlgorandAssetParamsCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)hasAsset:(nonnull NSString *)address
         assetId:(nonnull NSString *)assetId
        callback:(nullable id<LGBoolCallback>)callback {
    try {
        _cppRefHandle.get()->hasAsset(::djinni::String::toCpp(address),
                                      ::djinni::String::toCpp(assetId),
                                      ::djinni_generated::BoolCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getAssetBalance:(nonnull NSString *)assetId
               callback:(nullable id<LGAlgorandAssetAmountCallback>)callback {
    try {
        _cppRefHandle.get()->getAssetBalance(::djinni::String::toCpp(assetId),
                                             ::djinni_generated::AlgorandAssetAmountCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getAssetBalanceHistory:(nonnull NSString *)assetId
                         start:(nonnull NSString *)start
                           end:(nonnull NSString *)end
                        period:(LGTimePeriod)period
                      callback:(nullable id<LGAlgorandAssetAmountListCallback>)callback {
    try {
        _cppRefHandle.get()->getAssetBalanceHistory(::djinni::String::toCpp(assetId),
                                                    ::djinni::String::toCpp(start),
                                                    ::djinni::String::toCpp(end),
                                                    ::djinni::Enum<::ledger::core::api::TimePeriod, LGTimePeriod>::toCpp(period),
                                                    ::djinni_generated::AlgorandAssetAmountListCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getAssetsBalances:(nullable id<LGAlgorandAssetAmountListCallback>)callback {
    try {
        _cppRefHandle.get()->getAssetsBalances(::djinni_generated::AlgorandAssetAmountListCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getCreatedAssets:(nullable id<LGAlgorandAssetParamsListCallback>)callback {
    try {
        _cppRefHandle.get()->getCreatedAssets(::djinni_generated::AlgorandAssetParamsListCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getPendingRewards:(nullable id<LGAmountCallback>)callback {
    try {
        _cppRefHandle.get()->getPendingRewards(::djinni_generated::AmountCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getTotalRewards:(nullable id<LGAmountCallback>)callback {
    try {
        _cppRefHandle.get()->getTotalRewards(::djinni_generated::AmountCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)getFeeEstimate:(nullable LGAlgorandTransaction *)transaction
              callback:(nullable id<LGAmountCallback>)callback {
    try {
        _cppRefHandle.get()->getFeeEstimate(::djinni_generated::AlgorandTransaction::toCpp(transaction),
                                            ::djinni_generated::AmountCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)buildRawSignedTransaction:(nonnull NSData *)rawUnsignedTransaction
                                    signature:(nonnull NSData *)signature {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->buildRawSignedTransaction(::djinni::Binary::toCpp(rawUnsignedTransaction),
                                                                             ::djinni::Binary::toCpp(signature));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)broadcastRawTransaction:(nonnull NSData *)transaction
                       callback:(nullable id<LGStringCallback>)callback {
    try {
        _cppRefHandle.get()->broadcastRawTransaction(::djinni::Binary::toCpp(transaction),
                                                     ::djinni_generated::StringCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)broadcastTransaction:(nullable LGAlgorandTransaction *)transaction
                    callback:(nullable id<LGStringCallback>)callback {
    try {
        _cppRefHandle.get()->broadcastTransaction(::djinni_generated::AlgorandTransaction::toCpp(transaction),
                                                  ::djinni_generated::StringCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)createTransaction:(nullable id<LGAlgorandTransactionCallback>)callback {
    try {
        _cppRefHandle.get()->createTransaction(::djinni_generated::AlgorandTransactionCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto AlgorandAccount::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto AlgorandAccount::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGAlgorandAccount>(cpp);
}

}  // namespace djinni_generated

@end
