// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from bitcoin_like_wallet.djinni

#import "RCTCoreLGBitcoinLikeTransactionRequest.h"
#import "LGBitcoinLikeTransactionRequest.h"

@implementation RCTCoreLGBitcoinLikeTransactionRequest

//Export module
RCT_EXPORT_MODULE(RCTCoreLGBitcoinLikeTransactionRequest)

@synthesize bridge = _bridge;

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(init, initWithUtxo:(NSArray <NSDictionary *> *)utxo
                            outputs:(NSArray <NSDictionary *> *)outputs
                           baseFees:(nullable NSDictionary *)baseFees
                          totalFees:(nullable NSDictionary *)totalFees
                           lockTime:(nullable NSNumber *)lockTime withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    NSMutableDictionary *implementationsData = [[NSMutableDictionary alloc] init];
    NSMutableArray *field_0 = [[NSMutableArray alloc] init];

    NSMutableArray *field_0_data = [[NSMutableArray alloc] init];

    for (id utxo_elem in utxo)
    {
        RCTCoreLGBitcoinLikeOutput *rctParam_utxo_elem = (RCTCoreLGBitcoinLikeOutput *)[self.bridge moduleForName:@"CoreLGBitcoinLikeOutput"];
        LGBitcoinLikeOutput *field_0_elem = (LGBitcoinLikeOutput *)[rctParam_utxo_elem.objcImplementations objectForKey:utxo_elem[@"uid"]];
        [field_0_data addObject:utxo_elem[@"uid"]];
        [field_0 addObject:field_0_elem];

    }
    [implementationsData setObject:field_0_data forKey:@"utxo"];

    NSMutableArray *field_1 = [[NSMutableArray alloc] init];

    NSMutableArray *field_1_data = [[NSMutableArray alloc] init];

    for (id outputs_elem in outputs)
    {
        RCTCoreLGBitcoinLikeOutput *rctParam_outputs_elem = (RCTCoreLGBitcoinLikeOutput *)[self.bridge moduleForName:@"CoreLGBitcoinLikeOutput"];
        LGBitcoinLikeOutput *field_1_elem = (LGBitcoinLikeOutput *)[rctParam_outputs_elem.objcImplementations objectForKey:outputs_elem[@"uid"]];
        [field_1_data addObject:outputs_elem[@"uid"]];
        [field_1 addObject:field_1_elem];

    }
    [implementationsData setObject:field_1_data forKey:@"outputs"];

    RCTCoreLGAmount *rctParam_baseFees = (RCTCoreLGAmount *)[self.bridge moduleForName:@"CoreLGAmount"];
    LGAmount *field_2 = (LGAmount *)[rctParam_baseFees.objcImplementations objectForKey:baseFees[@"uid"]];
    [implementationsData setObject:baseFees[@"uid"] forKey:@"baseFees"];
    RCTCoreLGAmount *rctParam_totalFees = (RCTCoreLGAmount *)[self.bridge moduleForName:@"CoreLGAmount"];
    LGAmount *field_3 = (LGAmount *)[rctParam_totalFees.objcImplementations objectForKey:totalFees[@"uid"]];
    [implementationsData setObject:totalFees[@"uid"] forKey:@"totalFees"];


    LGBitcoinLikeTransactionRequest * finalResult = [[LGBitcoinLikeTransactionRequest alloc] initWithUtxo:field_0 outputs:field_1 baseFees:field_2 totalFees:field_3 lockTime:lockTime];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGBitcoinLikeTransactionRequest *rctImpl = (RCTCoreLGBitcoinLikeTransactionRequest *)[self.bridge moduleForName:@"CoreLGBitcoinLikeTransactionRequest"];
    NSArray *finalResultArray = [[NSArray alloc] initWithObjects:finalResult, uuid, nil];
    [rctImpl baseSetObject:finalResultArray];
    NSDictionary *result = @{@"type" : @"CoreLGBitcoinLikeTransactionRequest", @"uid" : uuid };
    if (result)
    {
        [self.implementationsData setObject:implementationsData forKey:uuid];
        resolve(result);
    }
}

-(void)mapImplementationsData:(NSDictionary *)currentInstance
{
    LGBitcoinLikeTransactionRequest *objcImpl = (LGBitcoinLikeTransactionRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSMutableDictionary *implementationsData = [[NSMutableDictionary alloc] init];
    id field_0 = objcImpl.utxo;
    NSMutableArray *converted_field_0 = [[NSMutableArray alloc] init];
    for (id field_0_elem in field_0)
    {
        NSString *field_0_elem_uuid = [[NSUUID UUID] UUIDString];
        RCTCoreLGBitcoinLikeOutput *rctImpl_field_0_elem = (RCTCoreLGBitcoinLikeOutput *)[self.bridge moduleForName:@"CoreLGBitcoinLikeOutput"];
        NSArray *field_0_elem_array = [[NSArray alloc] initWithObjects:field_0_elem, field_0_elem_uuid, nil];
        [rctImpl_field_0_elem baseSetObject:field_0_elem_array];
        NSDictionary *converted_field_0_elem = @{@"type" : @"CoreLGBitcoinLikeOutput", @"uid" : field_0_elem_uuid };
        [converted_field_0 addObject:converted_field_0_elem];
    }
    [implementationsData setObject:converted_field_0 forKey:@"utxo"];
    id field_1 = objcImpl.outputs;
    NSMutableArray *converted_field_1 = [[NSMutableArray alloc] init];
    for (id field_1_elem in field_1)
    {
        NSString *field_1_elem_uuid = [[NSUUID UUID] UUIDString];
        RCTCoreLGBitcoinLikeOutput *rctImpl_field_1_elem = (RCTCoreLGBitcoinLikeOutput *)[self.bridge moduleForName:@"CoreLGBitcoinLikeOutput"];
        NSArray *field_1_elem_array = [[NSArray alloc] initWithObjects:field_1_elem, field_1_elem_uuid, nil];
        [rctImpl_field_1_elem baseSetObject:field_1_elem_array];
        NSDictionary *converted_field_1_elem = @{@"type" : @"CoreLGBitcoinLikeOutput", @"uid" : field_1_elem_uuid };
        [converted_field_1 addObject:converted_field_1_elem];
    }
    [implementationsData setObject:converted_field_1 forKey:@"outputs"];
    id field_2 = objcImpl.baseFees;
    NSString *field_2_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGAmount *rctImpl_field_2 = (RCTCoreLGAmount *)[self.bridge moduleForName:@"CoreLGAmount"];
    if (field_2)
    {
        NSArray *field_2_array = [[NSArray alloc] initWithObjects:field_2, field_2_uuid, nil];
        [rctImpl_field_2 baseSetObject:field_2_array];
    }
    NSDictionary *converted_field_2 = @{@"type" : @"CoreLGAmount", @"uid" : field_2_uuid };
    [implementationsData setObject:converted_field_2 forKey:@"baseFees"];
    id field_3 = objcImpl.totalFees;
    NSString *field_3_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGAmount *rctImpl_field_3 = (RCTCoreLGAmount *)[self.bridge moduleForName:@"CoreLGAmount"];
    if (field_3)
    {
        NSArray *field_3_array = [[NSArray alloc] initWithObjects:field_3, field_3_uuid, nil];
        [rctImpl_field_3 baseSetObject:field_3_array];
    }
    NSDictionary *converted_field_3 = @{@"type" : @"CoreLGAmount", @"uid" : field_3_uuid };
    [implementationsData setObject:converted_field_3 forKey:@"totalFees"];
    [self.implementationsData setObject:implementationsData forKey:currentInstance[@"uid"]];
}
RCT_REMAP_METHOD(getUtxo, getUtxo:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    if (!data)
    {
        [self mapImplementationsData:currentInstance];
        data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    }
    NSArray<NSDictionary *> *result = [data objectForKey:@"utxo"];
    resolve(result);
}

RCT_REMAP_METHOD(getOutputs, getOutputs:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    if (!data)
    {
        [self mapImplementationsData:currentInstance];
        data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    }
    NSArray<NSDictionary *> *result = [data objectForKey:@"outputs"];
    resolve(result);
}

RCT_REMAP_METHOD(getBaseFees, getBaseFees:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    if (!data)
    {
        [self mapImplementationsData:currentInstance];
        data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    }
    NSDictionary *result = [data objectForKey:@"baseFees"];
    resolve(result);
}

RCT_REMAP_METHOD(getTotalFees, getTotalFees:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    if (!data)
    {
        [self mapImplementationsData:currentInstance];
        data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    }
    NSDictionary *result = [data objectForKey:@"totalFees"];
    resolve(result);
}

RCT_REMAP_METHOD(getLockTime, getLockTime:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGBitcoinLikeTransactionRequest *objcImpl = (LGBitcoinLikeTransactionRequest *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.lockTime};
    resolve(result);
}

@end
