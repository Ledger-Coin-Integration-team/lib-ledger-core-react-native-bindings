// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

#import "RCTCoreLGAlgorandAssetParams.h"
#import "LGAlgorandAssetParams.h"

@implementation RCTCoreLGAlgorandAssetParams

//Export module
RCT_EXPORT_MODULE(RCTCoreLGAlgorandAssetParams)

@synthesize bridge = _bridge;

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(init, initWithAssetId:(nonnull NSString *)assetId
                             assetName:(nonnull NSString *)assetName
                              unitName:(nonnull NSString *)unitName
                                   url:(nonnull NSString *)url
                         defaultFrozen:(nonnull NSNumber *)defaultFrozen
                                 total:(nonnull NSString *)total
                              decimals:(nonnull NSNumber *)decimals
                        creatorAddress:(nonnull NSString *)creatorAddress
                        managerAddress:(nonnull NSString *)managerAddress
                         freezeAddress:(nonnull NSString *)freezeAddress
                       clawbackAddress:(nonnull NSString *)clawbackAddress
                        reserveAddress:(nonnull NSString *)reserveAddress
                          metadataHash:(nonnull NSString *)metadataHash withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {


    LGAlgorandAssetParams * finalResult = [[LGAlgorandAssetParams alloc] initWithAssetId:assetId assetName:assetName unitName:unitName url:url defaultFrozen:defaultFrozen total:total decimals:decimals creatorAddress:creatorAddress managerAddress:managerAddress freezeAddress:freezeAddress clawbackAddress:clawbackAddress reserveAddress:reserveAddress metadataHash:metadataHash];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGAlgorandAssetParams *rctImpl = (RCTCoreLGAlgorandAssetParams *)[self.bridge moduleForName:@"CoreLGAlgorandAssetParams"];
    NSArray *finalResultArray = [[NSArray alloc] initWithObjects:finalResult, uuid, nil];
    [rctImpl baseSetObject:finalResultArray];
    NSDictionary *result = @{@"type" : @"CoreLGAlgorandAssetParams", @"uid" : uuid };
    if (result)
    {
        resolve(result);
    }
}

RCT_REMAP_METHOD(getAssetId, getAssetId:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandAssetParams *objcImpl = (LGAlgorandAssetParams *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.assetId};
    resolve(result);
}

RCT_REMAP_METHOD(getAssetName, getAssetName:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandAssetParams *objcImpl = (LGAlgorandAssetParams *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.assetName};
    resolve(result);
}

RCT_REMAP_METHOD(getUnitName, getUnitName:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandAssetParams *objcImpl = (LGAlgorandAssetParams *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.unitName};
    resolve(result);
}

RCT_REMAP_METHOD(getUrl, getUrl:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandAssetParams *objcImpl = (LGAlgorandAssetParams *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.url};
    resolve(result);
}

RCT_REMAP_METHOD(getDefaultFrozen, getDefaultFrozen:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandAssetParams *objcImpl = (LGAlgorandAssetParams *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.defaultFrozen};
    resolve(result);
}

RCT_REMAP_METHOD(getTotal, getTotal:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandAssetParams *objcImpl = (LGAlgorandAssetParams *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.total};
    resolve(result);
}

RCT_REMAP_METHOD(getDecimals, getDecimals:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandAssetParams *objcImpl = (LGAlgorandAssetParams *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.decimals};
    resolve(result);
}

RCT_REMAP_METHOD(getCreatorAddress, getCreatorAddress:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandAssetParams *objcImpl = (LGAlgorandAssetParams *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.creatorAddress};
    resolve(result);
}

RCT_REMAP_METHOD(getManagerAddress, getManagerAddress:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandAssetParams *objcImpl = (LGAlgorandAssetParams *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.managerAddress};
    resolve(result);
}

RCT_REMAP_METHOD(getFreezeAddress, getFreezeAddress:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandAssetParams *objcImpl = (LGAlgorandAssetParams *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.freezeAddress};
    resolve(result);
}

RCT_REMAP_METHOD(getClawbackAddress, getClawbackAddress:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandAssetParams *objcImpl = (LGAlgorandAssetParams *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.clawbackAddress};
    resolve(result);
}

RCT_REMAP_METHOD(getReserveAddress, getReserveAddress:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandAssetParams *objcImpl = (LGAlgorandAssetParams *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.reserveAddress};
    resolve(result);
}

RCT_REMAP_METHOD(getMetadataHash, getMetadataHash:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandAssetParams *objcImpl = (LGAlgorandAssetParams *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.metadataHash};
    resolve(result);
}

@end
