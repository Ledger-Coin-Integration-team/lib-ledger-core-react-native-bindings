// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

#import "RCTCoreLGAlgorandPaymentInfo.h"
#import "LGAlgorandPaymentInfo.h"

@implementation RCTCoreLGAlgorandPaymentInfo

//Export module
RCT_EXPORT_MODULE(RCTCoreLGAlgorandPaymentInfo)

@synthesize bridge = _bridge;

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(init, initWithRecipientAddress:(nonnull NSString *)recipientAddress
                                         amount:(nonnull NSString *)amount
                                   closeAddress:(nonnull NSString *)closeAddress
                                    closeAmount:(nonnull NSString *)closeAmount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {


    LGAlgorandPaymentInfo * finalResult = [[LGAlgorandPaymentInfo alloc] initWithRecipientAddress:recipientAddress amount:amount closeAddress:closeAddress closeAmount:closeAmount];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGAlgorandPaymentInfo *rctImpl = (RCTCoreLGAlgorandPaymentInfo *)[self.bridge moduleForName:@"CoreLGAlgorandPaymentInfo"];
    NSArray *finalResultArray = [[NSArray alloc] initWithObjects:finalResult, uuid, nil];
    [rctImpl baseSetObject:finalResultArray];
    NSDictionary *result = @{@"type" : @"CoreLGAlgorandPaymentInfo", @"uid" : uuid };
    if (result)
    {
        resolve(result);
    }
}

RCT_REMAP_METHOD(getRecipientAddress, getRecipientAddress:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandPaymentInfo *objcImpl = (LGAlgorandPaymentInfo *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.recipientAddress};
    resolve(result);
}

RCT_REMAP_METHOD(getAmount, getAmount:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandPaymentInfo *objcImpl = (LGAlgorandPaymentInfo *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.amount};
    resolve(result);
}

RCT_REMAP_METHOD(getCloseAddress, getCloseAddress:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandPaymentInfo *objcImpl = (LGAlgorandPaymentInfo *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.closeAddress};
    resolve(result);
}

RCT_REMAP_METHOD(getCloseAmount, getCloseAmount:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGAlgorandPaymentInfo *objcImpl = (LGAlgorandPaymentInfo *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.closeAmount};
    resolve(result);
}

@end
