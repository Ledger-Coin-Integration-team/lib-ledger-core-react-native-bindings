// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

package com.ledger.reactnative;

import co.ledger.core.AlgorandAssetParams;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

@ReactModule(name = "RCTCoreAlgorandAssetParams")
public class RCTCoreAlgorandAssetParams extends ReactContextBaseJavaModule {
    private final ReactApplicationContext reactContext;
    private Map<String, AlgorandAssetParams> javaObjects;
    public Map<String, AlgorandAssetParams> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreAlgorandAssetParams(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, AlgorandAssetParams>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreAlgorandAssetParams";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreAlgorandAssetParams", "First parameter of RCTCoreAlgorandAssetParams::release should be an instance of RCTCoreAlgorandAssetParams");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, AlgorandAssetParams> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    @ReactMethod
    public void init(String assetId, String assetName, String unitName, String url, Boolean defaultFrozen, String total, Integer decimals, String creatorAddress, String managerAddress, String freezeAddress, String clawbackAddress, String reserveAddress, String metadataHash, Promise promise) {
        AlgorandAssetParams javaResult = new AlgorandAssetParams(assetId, assetName, unitName, url, defaultFrozen, total, decimals, creatorAddress, managerAddress, freezeAddress, clawbackAddress, reserveAddress, metadataHash);

        String uuid = UUID.randomUUID().toString();
        this.javaObjects.put(uuid, javaResult);
        WritableNativeMap finalResult = new WritableNativeMap();
        finalResult.putString("type","RCTCoreAlgorandAssetParams");
        finalResult.putString("uid",uuid);
        promise.resolve(finalResult);
    }
    @ReactMethod
    public void getAssetId(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetParams javaObj = this.javaObjects.get(uid);
            String result = javaObj.getAssetId();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetParams::getAssetId", "First parameter of RCTCoreAlgorandAssetParams::getAssetId should be an instance of RCTCoreAlgorandAssetParams");
        }
    }

    @ReactMethod
    public void getAssetName(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetParams javaObj = this.javaObjects.get(uid);
            String result = javaObj.getAssetName();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetParams::getAssetName", "First parameter of RCTCoreAlgorandAssetParams::getAssetName should be an instance of RCTCoreAlgorandAssetParams");
        }
    }

    @ReactMethod
    public void getUnitName(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetParams javaObj = this.javaObjects.get(uid);
            String result = javaObj.getUnitName();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetParams::getUnitName", "First parameter of RCTCoreAlgorandAssetParams::getUnitName should be an instance of RCTCoreAlgorandAssetParams");
        }
    }

    @ReactMethod
    public void getUrl(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetParams javaObj = this.javaObjects.get(uid);
            String result = javaObj.getUrl();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetParams::getUrl", "First parameter of RCTCoreAlgorandAssetParams::getUrl should be an instance of RCTCoreAlgorandAssetParams");
        }
    }

    @ReactMethod
    public void getDefaultFrozen(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetParams javaObj = this.javaObjects.get(uid);
            Boolean result = javaObj.getDefaultFrozen();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putBoolean("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetParams::getDefaultFrozen", "First parameter of RCTCoreAlgorandAssetParams::getDefaultFrozen should be an instance of RCTCoreAlgorandAssetParams");
        }
    }

    @ReactMethod
    public void getTotal(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetParams javaObj = this.javaObjects.get(uid);
            String result = javaObj.getTotal();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetParams::getTotal", "First parameter of RCTCoreAlgorandAssetParams::getTotal should be an instance of RCTCoreAlgorandAssetParams");
        }
    }

    @ReactMethod
    public void getDecimals(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetParams javaObj = this.javaObjects.get(uid);
            Integer result = javaObj.getDecimals();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putInt("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetParams::getDecimals", "First parameter of RCTCoreAlgorandAssetParams::getDecimals should be an instance of RCTCoreAlgorandAssetParams");
        }
    }

    @ReactMethod
    public void getCreatorAddress(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetParams javaObj = this.javaObjects.get(uid);
            String result = javaObj.getCreatorAddress();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetParams::getCreatorAddress", "First parameter of RCTCoreAlgorandAssetParams::getCreatorAddress should be an instance of RCTCoreAlgorandAssetParams");
        }
    }

    @ReactMethod
    public void getManagerAddress(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetParams javaObj = this.javaObjects.get(uid);
            String result = javaObj.getManagerAddress();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetParams::getManagerAddress", "First parameter of RCTCoreAlgorandAssetParams::getManagerAddress should be an instance of RCTCoreAlgorandAssetParams");
        }
    }

    @ReactMethod
    public void getFreezeAddress(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetParams javaObj = this.javaObjects.get(uid);
            String result = javaObj.getFreezeAddress();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetParams::getFreezeAddress", "First parameter of RCTCoreAlgorandAssetParams::getFreezeAddress should be an instance of RCTCoreAlgorandAssetParams");
        }
    }

    @ReactMethod
    public void getClawbackAddress(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetParams javaObj = this.javaObjects.get(uid);
            String result = javaObj.getClawbackAddress();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetParams::getClawbackAddress", "First parameter of RCTCoreAlgorandAssetParams::getClawbackAddress should be an instance of RCTCoreAlgorandAssetParams");
        }
    }

    @ReactMethod
    public void getReserveAddress(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetParams javaObj = this.javaObjects.get(uid);
            String result = javaObj.getReserveAddress();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetParams::getReserveAddress", "First parameter of RCTCoreAlgorandAssetParams::getReserveAddress should be an instance of RCTCoreAlgorandAssetParams");
        }
    }

    @ReactMethod
    public void getMetadataHash(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetParams javaObj = this.javaObjects.get(uid);
            String result = javaObj.getMetadataHash();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetParams::getMetadataHash", "First parameter of RCTCoreAlgorandAssetParams::getMetadataHash should be an instance of RCTCoreAlgorandAssetParams");
        }
    }

}
