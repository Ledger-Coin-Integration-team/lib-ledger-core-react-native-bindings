// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

package com.ledger.reactnative;

import co.ledger.core.DatabaseBlob;
import co.ledger.core.DatabaseConnection;
import co.ledger.core.DatabaseStatement;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

/**
 * An active connection to a database. This API is fully synchronous and all objects created by this interface need to
 * return synchronously. A connection is used to prepare statements, managing transactions and creating abstractions of
 * database objects.
 */
@ReactModule(name = "RCTCoreDatabaseConnection")
public class RCTCoreDatabaseConnection extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, DatabaseConnectionImpl> javaObjects;
    public Map<String, DatabaseConnectionImpl> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreDatabaseConnection(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, DatabaseConnectionImpl>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreDatabaseConnection";
    }
    @ReactMethod
    public void newInstance(Promise promise)
    {
        DatabaseConnectionImpl newInstance = new DatabaseConnectionImpl(this.reactContext);
        String uuid = UUID.randomUUID().toString();
        this.javaObjects.put(uuid, newInstance);
        WritableNativeMap finalResult = new WritableNativeMap();
        finalResult.putString("type","RCTCoreDatabaseConnection");
        finalResult.putString("uid",uuid);
        promise.resolve(finalResult);
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreDatabaseConnection", "First parameter of RCTCoreDatabaseConnection::release should be an instance of RCTCoreDatabaseConnection");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, DatabaseConnectionImpl> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    /**
     * Prepare a statement object using the given SQL query. The statement object will then be responsible of executing
     * the query and handle results. Statement objects may be reused over time if their `repeatable` flag is set to true.
     * @param query A SQL query to execute (e.g. "SELECT * FROM users WHERE name = 'Joe'")
     * @param repeatable A flag to indicate whether or not the statement is repeatable
     */
    @ReactMethod
    public void prepareStatement(ReadableMap currentInstance, String query, boolean repeatable, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseConnectionImpl currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseStatement javaResult = currentInstanceObj.prepareStatement(query, repeatable);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseStatement rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseStatement.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, (DatabaseStatementImpl)javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseStatement");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Begin a SQL transaction on this connection. */
    @ReactMethod
    public void begin(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseConnectionImpl currentInstanceObj = this.javaObjects.get(sUid);

            currentInstanceObj.begin();
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** End the current transaction and rollback all changes that occurred between the call of `begin` and `rollback`. */
    @ReactMethod
    public void rollback(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseConnectionImpl currentInstanceObj = this.javaObjects.get(sUid);

            currentInstanceObj.rollback();
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** End the current transaction and persist all changes that occurred between the call of `begin` and `commit`. */
    @ReactMethod
    public void commit(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseConnectionImpl currentInstanceObj = this.javaObjects.get(sUid);

            currentInstanceObj.commit();
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Close the current connection. After this call the connection should never be called again. */
    @ReactMethod
    public void close(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseConnectionImpl currentInstanceObj = this.javaObjects.get(sUid);

            currentInstanceObj.close();
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Create a new empty blob.
     * @return An empty blob
     */
    @ReactMethod
    public void newBlob(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseConnectionImpl currentInstanceObj = this.javaObjects.get(sUid);

            DatabaseBlob javaResult = currentInstanceObj.newBlob();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreDatabaseBlob rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreDatabaseBlob.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, (DatabaseBlobImpl)javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreDatabaseBlob");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Check whether the connection is still alive. */
    @ReactMethod
    public void isAlive(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            DatabaseConnectionImpl currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.isAlive();
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
