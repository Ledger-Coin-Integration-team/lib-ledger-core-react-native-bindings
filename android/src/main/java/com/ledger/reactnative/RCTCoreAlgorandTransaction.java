// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

package com.ledger.reactnative;

import co.ledger.core.AlgorandAssetConfigurationInfo;
import co.ledger.core.AlgorandAssetFreezeInfo;
import co.ledger.core.AlgorandAssetTransferInfo;
import co.ledger.core.AlgorandParticipationInfo;
import co.ledger.core.AlgorandPaymentInfo;
import co.ledger.core.AlgorandTransaction;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

@ReactModule(name = "RCTCoreAlgorandTransaction")
public class RCTCoreAlgorandTransaction extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, AlgorandTransaction> javaObjects;
    public Map<String, AlgorandTransaction> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreAlgorandTransaction(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, AlgorandTransaction>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreAlgorandTransaction";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreAlgorandTransaction", "First parameter of RCTCoreAlgorandTransaction::release should be an instance of RCTCoreAlgorandTransaction");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, AlgorandTransaction> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }
    public static byte[] hexStringToByteArray(String hexString)
    {
        int hexStringLength = hexString.length();
        byte[] data = new byte[hexStringLength / 2];
        for (int i = 0; i < hexStringLength; i += 2)
        {
            data[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4) + Character.digit(hexString.charAt(i+1), 16));
        }
        return data;
    }
    static final String HEXES = "0123456789ABCDEF";
    public static String byteArrayToHexString( byte [] data)
    {
        if (data == null)
        {
            return null;
        }
        final StringBuilder hexStringBuilder = new StringBuilder( 2 * data.length );
        for ( final byte b : data )
        {
            hexStringBuilder.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));
        }
        return hexStringBuilder.toString();
    }

    @ReactMethod
    public void getId(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getId();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getType(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getType();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getSender(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getSender();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getFee(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getFee();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getNote(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getNote();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getRound(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getRound();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getSenderRewards(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getSenderRewards();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getReceiverRewards(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getReceiverRewards();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getCloseRewards(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getCloseRewards();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void setSender(ReadableMap currentInstance, String sender, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            currentInstanceObj.setSender(sender);
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void setFee(ReadableMap currentInstance, String fee, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            currentInstanceObj.setFee(fee);
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void setNote(ReadableMap currentInstance, String note, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            currentInstanceObj.setNote(note);
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void setPaymentInfo(ReadableMap currentInstance, ReadableMap info, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAlgorandPaymentInfo rctParam_info = this.reactContext.getNativeModule(RCTCoreAlgorandPaymentInfo.class);
            AlgorandPaymentInfo javaParam_0 = rctParam_info.getJavaObjects().get(info.getString("uid"));
            currentInstanceObj.setPaymentInfo(javaParam_0);
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getPaymentInfo(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            AlgorandPaymentInfo javaResult = currentInstanceObj.getPaymentInfo();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreAlgorandPaymentInfo rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreAlgorandPaymentInfo.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreAlgorandPaymentInfo");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void setParticipationInfo(ReadableMap currentInstance, ReadableMap info, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAlgorandParticipationInfo rctParam_info = this.reactContext.getNativeModule(RCTCoreAlgorandParticipationInfo.class);
            AlgorandParticipationInfo javaParam_0 = rctParam_info.getJavaObjects().get(info.getString("uid"));
            currentInstanceObj.setParticipationInfo(javaParam_0);
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getParticipationInfo(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            AlgorandParticipationInfo javaResult = currentInstanceObj.getParticipationInfo();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreAlgorandParticipationInfo rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreAlgorandParticipationInfo.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreAlgorandParticipationInfo");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void setAssetConfigurationInfo(ReadableMap currentInstance, ReadableMap info, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAlgorandAssetConfigurationInfo rctParam_info = this.reactContext.getNativeModule(RCTCoreAlgorandAssetConfigurationInfo.class);
            AlgorandAssetConfigurationInfo javaParam_0 = rctParam_info.getJavaObjects().get(info.getString("uid"));
            currentInstanceObj.setAssetConfigurationInfo(javaParam_0);
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getAssetConfigurationInfo(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            AlgorandAssetConfigurationInfo javaResult = currentInstanceObj.getAssetConfigurationInfo();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreAlgorandAssetConfigurationInfo rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreAlgorandAssetConfigurationInfo.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreAlgorandAssetConfigurationInfo");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void setAssetTransferInfo(ReadableMap currentInstance, ReadableMap info, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAlgorandAssetTransferInfo rctParam_info = this.reactContext.getNativeModule(RCTCoreAlgorandAssetTransferInfo.class);
            AlgorandAssetTransferInfo javaParam_0 = rctParam_info.getJavaObjects().get(info.getString("uid"));
            currentInstanceObj.setAssetTransferInfo(javaParam_0);
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getAssetTransferInfo(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            AlgorandAssetTransferInfo javaResult = currentInstanceObj.getAssetTransferInfo();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreAlgorandAssetTransferInfo rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreAlgorandAssetTransferInfo.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreAlgorandAssetTransferInfo");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void setAssetFreezeInfo(ReadableMap currentInstance, ReadableMap info, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAlgorandAssetFreezeInfo rctParam_info = this.reactContext.getNativeModule(RCTCoreAlgorandAssetFreezeInfo.class);
            AlgorandAssetFreezeInfo javaParam_0 = rctParam_info.getJavaObjects().get(info.getString("uid"));
            currentInstanceObj.setAssetFreezeInfo(javaParam_0);
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getAssetFreezeInfo(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            AlgorandAssetFreezeInfo javaResult = currentInstanceObj.getAssetFreezeInfo();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreAlgorandAssetFreezeInfo rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreAlgorandAssetFreezeInfo.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreAlgorandAssetFreezeInfo");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Serialize the transaction in MsgPack format */
    @ReactMethod
    public void serialize(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            byte[] javaResult = currentInstanceObj.serialize();
            WritableNativeMap result = new WritableNativeMap();
            String finalJavaResult = byteArrayToHexString(javaResult);
            result.putString("value", finalJavaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void setSignature(ReadableMap currentInstance, String signature, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandTransaction currentInstanceObj = this.javaObjects.get(sUid);

            byte [] javaParam_0 = hexStringToByteArray(signature);

            currentInstanceObj.setSignature(javaParam_0);
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
