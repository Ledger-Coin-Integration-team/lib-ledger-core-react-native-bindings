// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

package com.ledger.reactnative;

import co.ledger.core.AlgorandAssetConfigurationInfo;
import co.ledger.core.AlgorandAssetParams;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

@ReactModule(name = "RCTCoreAlgorandAssetConfigurationInfo")
public class RCTCoreAlgorandAssetConfigurationInfo extends ReactContextBaseJavaModule {
    private final ReactApplicationContext reactContext;
    private Map<String, AlgorandAssetConfigurationInfo> javaObjects;
    private Map<String, Object> implementationsData;
    public Map<String, AlgorandAssetConfigurationInfo> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreAlgorandAssetConfigurationInfo(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, AlgorandAssetConfigurationInfo>();
        this.implementationsData = new HashMap<>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreAlgorandAssetConfigurationInfo";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreAlgorandAssetConfigurationInfo", "First parameter of RCTCoreAlgorandAssetConfigurationInfo::release should be an instance of RCTCoreAlgorandAssetConfigurationInfo");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, AlgorandAssetConfigurationInfo> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    @ReactMethod
    public void init(String assetId, Optional<ReadableMap> assetParams, Promise promise) {
        WritableNativeMap implementationsData = new WritableNativeMap();
        RCTCoreAlgorandAssetParams rctParam_assetParams = this.reactContext.getNativeModule(RCTCoreAlgorandAssetParams.class);
        AlgorandAssetParams javaParam_1 = rctParam_assetParams.getJavaObjects().get(assetParams.get().getString("uid"));
        implementationsData.putString("assetParams", assetParams.get().getString("uid"));
        AlgorandAssetConfigurationInfo javaResult = new AlgorandAssetConfigurationInfo(assetId, javaParam_1);

        String uuid = UUID.randomUUID().toString();
        this.javaObjects.put(uuid, javaResult);
        WritableNativeMap finalResult = new WritableNativeMap();
        finalResult.putString("type","RCTCoreAlgorandAssetConfigurationInfo");
        finalResult.putString("uid",uuid);
        this.implementationsData.put(uuid, implementationsData);
        promise.resolve(finalResult);
    }
    public void mapImplementationsData(ReadableMap currentInstance)
    {
        String currentInstanceUid = currentInstance.getString("uid");
        AlgorandAssetConfigurationInfo javaImpl = this.javaObjects.get(currentInstanceUid);
        WritableNativeMap implementationsData = new WritableNativeMap();
        AlgorandAssetParams field_1 = javaImpl.getAssetParams();
        String field_1_uuid = UUID.randomUUID().toString();
        RCTCoreAlgorandAssetParams rctImpl_field_1 = this.reactContext.getNativeModule(RCTCoreAlgorandAssetParams.class);
        rctImpl_field_1.getJavaObjects().put(field_1_uuid, field_1);
        WritableNativeMap converted_field_1 = new WritableNativeMap();
        converted_field_1.putString("type","RCTCoreAlgorandAssetParams");
        converted_field_1.putString("uid",field_1_uuid);
        implementationsData.putMap("assetParams", converted_field_1);
        this.implementationsData.put(currentInstanceUid, implementationsData);
    }
    @ReactMethod
    public void getAssetId(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            AlgorandAssetConfigurationInfo javaObj = this.javaObjects.get(uid);
            String result = javaObj.getAssetId();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetConfigurationInfo::getAssetId", "First parameter of RCTCoreAlgorandAssetConfigurationInfo::getAssetId should be an instance of RCTCoreAlgorandAssetConfigurationInfo");
        }
    }

    @ReactMethod
    public void getAssetParams(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (!this.implementationsData.containsKey(uid))
            {
                this.mapImplementationsData(currentInstance);
            }
            ReadableNativeMap data = (ReadableNativeMap)this.implementationsData.get(uid);
            WritableNativeMap result = new WritableNativeMap();
            result.merge(data.getMap("assetParams"));
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreAlgorandAssetConfigurationInfo::getAssetParams", "First parameter of RCTCoreAlgorandAssetConfigurationInfo::getAssetParams should be an instance of RCTCoreAlgorandAssetConfigurationInfo");
        }
    }

}
