// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

package com.ledger.reactnative;

import co.ledger.core.AlgorandAccount;
import co.ledger.core.AlgorandAssetAmountCallback;
import co.ledger.core.AlgorandAssetAmountListCallback;
import co.ledger.core.AlgorandAssetParamsCallback;
import co.ledger.core.AlgorandAssetParamsListCallback;
import co.ledger.core.AlgorandOperationType;
import co.ledger.core.AlgorandTransaction;
import co.ledger.core.AlgorandTransactionCallback;
import co.ledger.core.AmountCallback;
import co.ledger.core.BoolCallback;
import co.ledger.core.StringCallback;
import co.ledger.core.TimePeriod;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

@ReactModule(name = "RCTCoreAlgorandAccount")
public class RCTCoreAlgorandAccount extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, AlgorandAccount> javaObjects;
    public Map<String, AlgorandAccount> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreAlgorandAccount(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, AlgorandAccount>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreAlgorandAccount";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreAlgorandAccount", "First parameter of RCTCoreAlgorandAccount::release should be an instance of RCTCoreAlgorandAccount");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, AlgorandAccount> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }
    public static byte[] hexStringToByteArray(String hexString)
    {
        int hexStringLength = hexString.length();
        byte[] data = new byte[hexStringLength / 2];
        for (int i = 0; i < hexStringLength; i += 2)
        {
            data[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4) + Character.digit(hexString.charAt(i+1), 16));
        }
        return data;
    }
    static final String HEXES = "0123456789ABCDEF";
    public static String byteArrayToHexString( byte [] data)
    {
        if (data == null)
        {
            return null;
        }
        final StringBuilder hexStringBuilder = new StringBuilder( 2 * data.length );
        for ( final byte b : data )
        {
            hexStringBuilder.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));
        }
        return hexStringBuilder.toString();
    }

    /**
     * Get the maximum amount spendable in one transaction
     * @param callback, Callback returning the maximum amount spendable
     * @param operationType, the type of the operation
     */
    @ReactMethod
    public void getSpendableBalance(ReadableMap currentInstance, int operationType, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            if (operationType < 0 || AlgorandOperationType.values().length <= operationType)
            {
                promise.reject("Enum error", "Failed to get enum AlgorandOperationType");
                return;
            }
            AlgorandOperationType javaParam_0 = AlgorandOperationType.values()[operationType];
            RCTCoreAmountCallback javaParam_1 = RCTCoreAmountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getSpendableBalance(javaParam_0, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get information about a specific asset
     * @param assetId, the unique identifier of the asset to look for
     * @param callback, Callback returning the information about the queried asset
     */
    @ReactMethod
    public void getAsset(ReadableMap currentInstance, String assetId, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAlgorandAssetParamsCallback javaParam_1 = RCTCoreAlgorandAssetParamsCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getAsset(assetId, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Check if address has a specific asset
     * @param assetId, the unique identifier of the asset to look for
     * @param callback, Callback returning the true if the address hold the asset
     */
    @ReactMethod
    public void hasAsset(ReadableMap currentInstance, String address, String assetId, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreBoolCallback javaParam_2 = RCTCoreBoolCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.hasAsset(address, assetId, javaParam_2);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get balance of account for a particular asset.
     * @param assetId, the unique identifier of the asset on the algorand network
     * @param callback, if getAssetBalance succeeds, Callback returning an Amount object which represents account's balance
     */
    @ReactMethod
    public void getAssetBalance(ReadableMap currentInstance, String assetId, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAlgorandAssetAmountCallback javaParam_1 = RCTCoreAlgorandAssetAmountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getAssetBalance(assetId, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get balance of account for a particular asset at a precise interval with a certain granularity
     * @param assetId, the unique identifier of the asset on the algorand network
     * @param start, lower bound of search range
     * @param end, upper bound of search range
     * @param precision, granularity at which we want results
     * @param callback, ListCallback returning a list of Amount objects which represents account's balance
     */
    @ReactMethod
    public void getAssetBalanceHistory(ReadableMap currentInstance, String assetId, String start, String end, int period, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            if (period < 0 || TimePeriod.values().length <= period)
            {
                promise.reject("Enum error", "Failed to get enum TimePeriod");
                return;
            }
            TimePeriod javaParam_3 = TimePeriod.values()[period];
            RCTCoreAlgorandAssetAmountListCallback javaParam_4 = RCTCoreAlgorandAssetAmountListCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getAssetBalanceHistory(assetId, start, end, javaParam_3, javaParam_4);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get balances of all assets to which account is registered
     * @param callback, ListCallback returning a list of AlgorandAssetAmount objects representing the different balances
     */
    @ReactMethod
    public void getAssetsBalances(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAlgorandAssetAmountListCallback javaParam_0 = RCTCoreAlgorandAssetAmountListCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getAssetsBalances(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get information about the assets created by account
     * @param callback, ListCallback returning a list of AlgorandAssetParams objects representing the assets created by account
     */
    @ReactMethod
    public void getCreatedAssets(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAlgorandAssetParamsListCallback javaParam_0 = RCTCoreAlgorandAssetParamsListCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getCreatedAssets(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get the pending rewards for account
     * @param callback, Callback returning the amount of pending rewards in MicroAlgos
     */
    @ReactMethod
    public void getPendingRewards(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmountCallback javaParam_0 = RCTCoreAmountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getPendingRewards(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get the total rewards of MicroAlgos account has received, including pending rewards.
     * @param callback, Callback returning the total rewards in MicroAlgos.
     */
    @ReactMethod
    public void getTotalRewards(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmountCallback javaParam_0 = RCTCoreAmountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getTotalRewards(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get an estimation (in MicroAlgos) of the fees needed to broadcast a given transaction to the algorand network
     * @param transaction, the transaction for which fees are estimated
     * @param callback, Callback returning the fees in MicroAlgos for the specified transaction
     */
    @ReactMethod
    public void getFeeEstimate(ReadableMap currentInstance, ReadableMap transaction, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAlgorandTransaction rctParam_transaction = this.reactContext.getNativeModule(RCTCoreAlgorandTransaction.class);
            AlgorandTransaction javaParam_0 = rctParam_transaction.getJavaObjects().get(transaction.getString("uid"));
            RCTCoreAmountCallback javaParam_1 = RCTCoreAmountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getFeeEstimate(javaParam_0, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Build a raw signed transaction from a raw unsigned transaction and the signature
     * @param rawUnsignedTransaction, the msgpack-encoded unsigned transaction
     * @param signature, the signature of the transaction
     * @return binary, the msgpack-encoded signed transaction
     */
    @ReactMethod
    public void buildRawSignedTransaction(ReadableMap currentInstance, String rawUnsignedTransaction, String signature, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            byte [] javaParam_0 = hexStringToByteArray(rawUnsignedTransaction);

            byte [] javaParam_1 = hexStringToByteArray(signature);

            byte[] javaResult = currentInstanceObj.buildRawSignedTransaction(javaParam_0, javaParam_1);
            WritableNativeMap result = new WritableNativeMap();
            String finalJavaResult = byteArrayToHexString(javaResult);
            result.putString("value", finalJavaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Broadcast a raw transaction to the algorand network
     * @param transaction, the msgpack-encoded transaction
     * @param callback, Callback returning the id of the transaction in case of success, an error message otherwise
     */
    @ReactMethod
    public void broadcastRawTransaction(ReadableMap currentInstance, String transaction, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            byte [] javaParam_0 = hexStringToByteArray(transaction);

            RCTCoreStringCallback javaParam_1 = RCTCoreStringCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.broadcastRawTransaction(javaParam_0, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Broadcast an AlgorandTransaction object to the algorand network
     * @param transaction, the transaction to broadcast
     * @param callback, Callback returning the fees in MicroAlgos for the specified transaction
     */
    @ReactMethod
    public void broadcastTransaction(ReadableMap currentInstance, ReadableMap transaction, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAlgorandTransaction rctParam_transaction = this.reactContext.getNativeModule(RCTCoreAlgorandTransaction.class);
            AlgorandTransaction javaParam_0 = rctParam_transaction.getJavaObjects().get(transaction.getString("uid"));
            RCTCoreStringCallback javaParam_1 = RCTCoreStringCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.broadcastTransaction(javaParam_0, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Create a new transaction
     * @param callback, The new transaction
     */
    @ReactMethod
    public void createTransaction(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            AlgorandAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAlgorandTransactionCallback javaParam_0 = RCTCoreAlgorandTransactionCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.createTransaction(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
