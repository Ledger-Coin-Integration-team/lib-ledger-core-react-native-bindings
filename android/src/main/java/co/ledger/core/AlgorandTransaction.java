// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from idl.djinni

package co.ledger.core;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class AlgorandTransaction {
    public abstract String getId();

    public abstract String getType();

    public abstract String getSender();

    public abstract String getFee();

    public abstract String getNote();

    public abstract String getRound();

    public abstract String getSenderRewards();

    public abstract String getReceiverRewards();

    public abstract String getCloseRewards();

    public abstract void setSender(String sender);

    public abstract void setFee(String fee);

    public abstract void setNote(String note);

    public abstract void setPaymentInfo(AlgorandPaymentInfo info);

    public abstract AlgorandPaymentInfo getPaymentInfo();

    public abstract void setParticipationInfo(AlgorandParticipationInfo info);

    public abstract AlgorandParticipationInfo getParticipationInfo();

    public abstract void setAssetConfigurationInfo(AlgorandAssetConfigurationInfo info);

    public abstract AlgorandAssetConfigurationInfo getAssetConfigurationInfo();

    public abstract void setAssetTransferInfo(AlgorandAssetTransferInfo info);

    public abstract AlgorandAssetTransferInfo getAssetTransferInfo();

    public abstract void setAssetFreezeInfo(AlgorandAssetFreezeInfo info);

    public abstract AlgorandAssetFreezeInfo getAssetFreezeInfo();

    /** Serialize the transaction in MsgPack format */
    public abstract byte[] serialize();

    public abstract void setSignature(byte[] signature);

    private static final class CppProxy extends AlgorandTransaction
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String getId()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getId(this.nativeRef);
        }
        private native String native_getId(long _nativeRef);

        @Override
        public String getType()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getType(this.nativeRef);
        }
        private native String native_getType(long _nativeRef);

        @Override
        public String getSender()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSender(this.nativeRef);
        }
        private native String native_getSender(long _nativeRef);

        @Override
        public String getFee()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFee(this.nativeRef);
        }
        private native String native_getFee(long _nativeRef);

        @Override
        public String getNote()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getNote(this.nativeRef);
        }
        private native String native_getNote(long _nativeRef);

        @Override
        public String getRound()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRound(this.nativeRef);
        }
        private native String native_getRound(long _nativeRef);

        @Override
        public String getSenderRewards()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSenderRewards(this.nativeRef);
        }
        private native String native_getSenderRewards(long _nativeRef);

        @Override
        public String getReceiverRewards()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getReceiverRewards(this.nativeRef);
        }
        private native String native_getReceiverRewards(long _nativeRef);

        @Override
        public String getCloseRewards()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCloseRewards(this.nativeRef);
        }
        private native String native_getCloseRewards(long _nativeRef);

        @Override
        public void setSender(String sender)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setSender(this.nativeRef, sender);
        }
        private native void native_setSender(long _nativeRef, String sender);

        @Override
        public void setFee(String fee)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setFee(this.nativeRef, fee);
        }
        private native void native_setFee(long _nativeRef, String fee);

        @Override
        public void setNote(String note)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setNote(this.nativeRef, note);
        }
        private native void native_setNote(long _nativeRef, String note);

        @Override
        public void setPaymentInfo(AlgorandPaymentInfo info)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPaymentInfo(this.nativeRef, info);
        }
        private native void native_setPaymentInfo(long _nativeRef, AlgorandPaymentInfo info);

        @Override
        public AlgorandPaymentInfo getPaymentInfo()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPaymentInfo(this.nativeRef);
        }
        private native AlgorandPaymentInfo native_getPaymentInfo(long _nativeRef);

        @Override
        public void setParticipationInfo(AlgorandParticipationInfo info)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setParticipationInfo(this.nativeRef, info);
        }
        private native void native_setParticipationInfo(long _nativeRef, AlgorandParticipationInfo info);

        @Override
        public AlgorandParticipationInfo getParticipationInfo()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getParticipationInfo(this.nativeRef);
        }
        private native AlgorandParticipationInfo native_getParticipationInfo(long _nativeRef);

        @Override
        public void setAssetConfigurationInfo(AlgorandAssetConfigurationInfo info)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setAssetConfigurationInfo(this.nativeRef, info);
        }
        private native void native_setAssetConfigurationInfo(long _nativeRef, AlgorandAssetConfigurationInfo info);

        @Override
        public AlgorandAssetConfigurationInfo getAssetConfigurationInfo()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAssetConfigurationInfo(this.nativeRef);
        }
        private native AlgorandAssetConfigurationInfo native_getAssetConfigurationInfo(long _nativeRef);

        @Override
        public void setAssetTransferInfo(AlgorandAssetTransferInfo info)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setAssetTransferInfo(this.nativeRef, info);
        }
        private native void native_setAssetTransferInfo(long _nativeRef, AlgorandAssetTransferInfo info);

        @Override
        public AlgorandAssetTransferInfo getAssetTransferInfo()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAssetTransferInfo(this.nativeRef);
        }
        private native AlgorandAssetTransferInfo native_getAssetTransferInfo(long _nativeRef);

        @Override
        public void setAssetFreezeInfo(AlgorandAssetFreezeInfo info)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setAssetFreezeInfo(this.nativeRef, info);
        }
        private native void native_setAssetFreezeInfo(long _nativeRef, AlgorandAssetFreezeInfo info);

        @Override
        public AlgorandAssetFreezeInfo getAssetFreezeInfo()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAssetFreezeInfo(this.nativeRef);
        }
        private native AlgorandAssetFreezeInfo native_getAssetFreezeInfo(long _nativeRef);

        @Override
        public byte[] serialize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_serialize(this.nativeRef);
        }
        private native byte[] native_serialize(long _nativeRef);

        @Override
        public void setSignature(byte[] signature)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setSignature(this.nativeRef, signature);
        }
        private native void native_setSignature(long _nativeRef, byte[] signature);
    }
}
